plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
    id 'application'
}

group 'com.bruondles.file_query'
ext.artifactId = "interpreter"
version '1.0.0'
mainClassName = 'com.brunodles.file_query_interpreter.KotlinInterpreter'

sourceCompatibility = 1.8
compileKotlin { kotlinOptions.jvmTarget = "1.8" }
compileTestKotlin { kotlinOptions.jvmTarget = "1.8" }

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":file_query")

    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    // Kotlin Script engine
//    implementation "org.jetbrains.kotlin:kotlin-script-runtime"
//    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable"
//    implementation "org.jetbrains.kotlin:kotlin-script-util"
//    implementation "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable"
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm"
    compileOnly "org.jetbrains.kotlin:kotlin-scripting-jvm-host"
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-scripting-jvm-host"

    // Groovy Engine
    implementation 'org.codehaus.groovy:groovy-all:3.0.17'

    // Js Engine
    implementation 'org.mozilla:rhino:1.7.10'

    testImplementation 'junit:junit:4.12'
    testImplementation "io.mockk:mockk:1.8.13"
}

//jar {
//    manifest {
//        attributes(
//                'Class-Path':
//                        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) },
//                'Main-Class': mainClassName
//        )
//    }
//
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//    into ''
//}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    archiveClassifier = "all"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}